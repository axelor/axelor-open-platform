# Application Information
# ~~~~~

application.name = Axelor application
application.description = Axelor Demo application
application.version = 1.0.0
application.author = Axelor
application.copyright = Copyright (c) {year} Axelor. All Rights Reserved.

# Header logo. Should be 40px in height with transparent background.
#application.logo = img/axelor.png

# Header logo for dark mode theme. Should be 40px in height with transparent background.
#application.logo-dark = img/axelor-dark.png

# Website icon. Must be a multiple of 48px square for favicon compatibility.
#application.icon = ico/favicon.ico

# Website icon for dark mode theme. Must be a multiple of 48px square for favicon compatibility.
#application.icon-dark =

# Home website. Home page link in user dropdown menu
application.home = https://www.axelor.com

# Online help. Link to be used in About page.
application.help = https://docs.axelor.com

# Application deployment mode. Can be `prod` or `dev`
application.mode = dev

# CSS theme
#application.theme =

# Default Locale (en, fr, fr_FR, en_US)
#application.locale =

# Base url of the application.
#application.base-url =

# how often client polls in seconds
#application.polling-interval = 10

# Enable multi-tenancy
#application.multi-tenancy = false

# `if-feature` custom class
#application.config-provider = com.axelor.app.MyAppConfig

# Pattern to validate domain expressions
#application.domain-blocklist-pattern = (\\(\\s*(SELECT|DELETE|UPDATE)\\s+)|query_to_xml|some_another_function

# Groovy scripts cache size
#application.script.cache.size = 1000

# Groovy scripts cache entry expire time (in minutes)
#application.script.cache.expire-time = 20

# whether to not check action permissions
#application.permission.disable-action = false

# whether to not check relational fields permissions
#application.permission.disable-relational-field = false

# whether to enable the password reset feature
#application.reset-password.enabled = true

# maximum validity period of password reset tokens in hours
#application.reset-password.max-age = 24

# OpenAPI configuration
# ~~~~~

# Enable OpenAPI resource endpoint
#application.openapi.enabled = true

#List of packages (and their subpackages) to exclude from OpenAPI scans
#application.openapi.scan.exclude.packages =

#List of classes to exclude from OpenAPI scans.
#application.openapi.scan.exclude.classes =

#List of packages (and their subpackages) to include in OpenAPI scans.
#application.openapi.scan.packages =

#List of classes to include in OpenAPI scans.
#application.openapi.scan.classes =

# Enable both OpenAPI resource endpoint and Swagger UI
#application.swagger-ui.enabled = true

# Allow "Try it out" in Swagger UI
#application.swagger-ui.allow-try-it-out = false

# Sign-in page configuration
# ~~~~~

# Sign-in logo, default to `application.logo`
#application.sign-in.logo =

# Sign-in logo for dark theme mode, default to `application.logo-dark`
#application.sign-in.logo-dark =

# Sign-in title
#application.sign-in.title =

# Sign-in footer
#application.sign-in.footer =

# Sign-in username field configs
#application.sign-in.fields.username.show-title = true
#application.sign-in.fields.username.title = Username
#application.sign-in.fields.username.placeholder =
#application.sign-in.fields.username.icon =

# Sign-in password field configs
#application.sign-in.fields.password.show-title = true
#application.sign-in.fields.password.title = Password
#application.sign-in.fields.password.placeholder =
#application.sign-in.fields.password.icon =

# Sign-in tenant field configs
#application.sign-in.fields.tenant.show-title = true
#application.sign-in.fields.tenant.title = Tenant

# Extra buttons inside the form login
#application.sign-in.buttons.<button-name>.title =
#application.sign-in.buttons.<button-name>.type =
#application.sign-in.buttons.<button-name>.variant =
#application.sign-in.buttons.<button-name>.icon =
#application.sign-in.buttons.<button-name>.link =
#application.sign-in.buttons.<button-name>.order =

# Sign-in submit button configs
#application.sign-in.buttons.submit.title = Sign in
#application.sign-in.buttons.submit.type = button
#application.sign-in.buttons.submit.variant = primary
#application.sign-in.buttons.submit.icon =

# View configuration
# ~~~~~

# Whether to use single tab layout
#view.single-tab = false

# Define the maximum opened tabs allowed
#view.max-tabs = 10

# If `checkbox`, grid widgets will have checkbox selection enabled
#view.grid.selection = checkbox

# Whether to disable views customization
view.allow-customization = true

# Whether to disable advance search sharing
#view.adv-search.share = false

# Whether to disable export full option in advance search
#view.adv-search.export-full = false

# Whether to check version value for concurrent updates when switching tabs
#view.form.check-version = false

# Whether to disable view collaboration (EE only)
#view.collaboration.enabled = true

# Pattern to validate user password
#user.password.pattern =

# Title displayed for the password pattern
#user.password.pattern-title =

# API
# ~~~~~

# Define the maximum number of items per page
#api.pagination.max-per-page = 500

# Define the default number of items per page
#api.pagination.default-per-page = 40

# Session configuration
# ~~~~~

# Session timeout (in minutes)
session.timeout = 60

# Define session cookie as secure
#session.cookie.secure = true

# Reports
# ~~~~~

# External directory for birt report designs
#reports.design-dir = {user.home}/.axelor/reports

# Custom fonts config path for birt report designs
#reports.fonts-config = /path/to/custom-font-config.xml

# Template
# ~~~~~

# Template storage path for groovy template
#template.search-dir = {user.home}/.axelor/templates

# Encryption
# ~~~~~

# Encryption password
#encryption.password = MySuperSecretKey

# Encryption algorithm (CBC or GCM)
#encryption.algorithm = CBC

# Old Encryption password
#encryption.old-password = MySuperSecretKey

# Old Encryption algorithm (CBC or GCM)
#encryption.old-algorithm = CBC

# Database settings
# ~~~~~

# PostgreSQL
db.default.ddl = update
db.default.url = jdbc:postgresql://localhost:5432/axelor-demo
db.default.user = axelor
db.default.password = ****

# MySQL
#db.default.ddl = update
#db.default.url = jdbc:mysql://localhost:3306/axelor_demo_dev
#db.default.user = axelor
#db.default.password =

# Oracle
#db.default.ddl = update
#db.default.url = jdbc:oracle:thin:@localhost:1521:oracle
#db.default.user = axelor
#db.default.password =

# Shared cache mode settings (ALL, DISABLE_SELECTIVE, ENABLE_SELECTIVE, NONE)
javax.persistence.sharedCache.mode = ENABLE_SELECTIVE

# HikariCP connection pool
#hibernate.hikari.minimumIdle = 5
#hibernate.hikari.maximumPoolSize = 20
#hibernate.hikari.idleTimeout = 300000

# define the batch size
#hibernate.jdbc.batch_size = 20

# define the fetch size
#hibernate.jdbc.fetch_size = 20

# second-level cache factory
#hibernate.cache.region.factory_class = jcache

# second-level cache provider
#hibernate.javax.cache.provider =

# Data
# ~~~~~

# Storage path for upload files
data.upload.dir = {user.home}/.axelor/attachments

# maximum upload size (in MB)
data.upload.max-size = 5

# Upload filename pattern
#data.upload.filename-pattern = {year}-{month}/{day}/{name}

# Allowlist file name pattern, only matching files will be allowed
#data.upload.allowlist.pattern = \\.(xml|html|jpg|png|pdf|xsl)$

# Blocklist file name pattern, matching files will be rejected
#data.upload.blocklist.pattern = \\.(svg)$

# Whitelist content type can be used to allow file upload with matching content.
#data.upload.allowlist.types = image/*,video/webm

# Blacklist content type can be used to block file upload with matching content.
#data.upload.blocklist.types = image/*,video/webm

# Data export encoding
data.export.encoding = UTF-8

# Storage path for export action
#data.export.dir = {user.home}/.axelor/data-export

# Maximum number of records to export, -1 means unlimited
#data.export.max-size = 5000

# Export fetch size
#data.export.fetch-size = 1000

# default export separator
#data.export.separator = ,

# whether to export collections fields
#data.export.collections.enabled = false

# export separator for collections fields
#data.export.collections.separator = \u0020|\u0020

# define a fixed locale for all exports
#data.export.locale =

# Whether to import demo data for the application
data.import.demo-data = true

# CORS
# ~~~~~

# Comma-separated list of origins to allow
#cors.allow-origin = *

# whether credentials are supported
#cors.allow-credentials = true

# Comma-separated list of methods to allow
#cors.allow-methods = GET,PUT,POST,DELETE,HEAD,OPTIONS

# Comma-separated list of headers to allow in a request
#cors.allow-headers = Origin,Accept,X-Requested-With,Content-Type,Access-Control-Request-Method,Access-Control-Request-Headers

# how long the response from a pre-flight request can be cached by clients
#cors.max-age =

# comma-separated list of headers to include in a response
#cors.expose-headers =

# Context values
# ~~~~~

# Custom header logo
#context.appLogo = com.axelor.some.Class:getAppLogo

# Custom icon
#context.appIcon = com.axelor.some.Class:getAppIcon

# Quartz Scheduler

# Whether to enable quartz scheduler
#quartz.enable = true

# Total number of threads in quartz thread pool
#quartz.thread-count = 3

# Auth
# ~~~~~

# comma-separated list of provider names (EE only)
#auth.provider-order =

# provider to use by default (in place of the form client) (EE only)
#auth.provider-default =

# Default callback URL (for indirect clients)
#auth.callback-url =

# user provisioning: create / link / none
#auth.user.provisioning = none

# default group for created users
#auth.user.default-group = users

# attribute used as the value for the principal name.
#auth.user.principal-attribute = email

# logout URL
#auth.logout.default-url =

# logout URL pattern
#auth.logout.url-pattern =

# remove profiles from session (EE only)
#auth.logout.local = true

# call identity provider logout endpoint (EE only)
#auth.logout.central = false

# enable indirect and/or direct basic auth
#auth.local.basic-auth = indirect, direct


# Google OpenID Connect (EE only)
# ~~~~~

# client ID
#auth.provider.google.client-id =
# client secret
#auth.provider.google.secret =

# Keycloak OpenID Connect (EE only)
# ~~~~~

# client ID
#auth.provider.keycloak.client-id = demo-app
# client secret
#auth.provider.keycloak.secret = 233d1690-4498-490c-a60d-5d12bb685557

# authentication realm
#auth.provider.keycloak.realm = demo-app
# Keycloak server base URI
#auth.provider.keycloak.base-uri = http://localhost:8083/auth

# SAML 2.0 (EE only)
# ~~~~~

# path to keystore
#auth.provider.saml.keystore-path = {java.io.tmpdir}/samlKeystore.jks
# value of the -storepass option for the keystore
#auth.provider.saml.keystore-password = open-platform-demo-passwd
# value of the -keypass option
#auth.provider.saml.private-key-password = open-platform-demo-passwd

# path to IdP metadata
#auth.provider.saml.identity-provider-metadata-path = http://localhost:9012/simplesaml/saml2/idp/metadata.php

# path to SP metadata
#auth.provider.saml.service-provider-metadata-path = {java.io.tmpdir}/sp-metadata.xml
# SP entity ID (defaults to auth.callback-url + "?client_name=SAML2Client")
#auth.provider.saml.service-provider-entity-id = sp.test.pac4j
# full callback URL for proper SP metadata generation
#auth.provider.saml.callback-url = https://example.com/my-axelor-app/callback

# LDAP Configuration
# ~~~~~

# server URL (SSL is automatically enabled with ldaps protocol)
#auth.ldap.server.url = ldap://localhost:389
# use StartTLS
#auth.ldap.server.starttls = false
# SASL authentication type: simple (default) / CRAM-MD5 / DIGEST-MD5 / EXTERNAL / GSSAPI
#auth.ldap.server.auth.type = simple
# maximum amount of time that connects will block
#auth.ldap.server.connect-timeout =
# maximum amount of time that operations will wait for a response
#auth.ldap.server.response-timeout =

# system user
#auth.ldap.server.auth.user = cn=admin,dc=test,dc=com
#auth.ldap.server.auth.password = admin

# group search base
#auth.ldap.group.base = ou=groups,dc=test,dc=com
# a template to search groups by user login id
#auth.ldap.group.filter = (uniqueMember=uid={0})

# user search base
#auth.ldap.user.base = ou=users,dc=test,dc=com
# a template to search user by user login id
#auth.ldap.user.filter = (uid={0})
# define the user DN format
#auth.ldap.user.dn-format =
# define the id attribute
#auth.ldap.user.id-attribute = uid
# define the username attribute
#auth.ldap.user.username-attribute = uid

# path of the truststore
#auth.ldap.server.ssl.trust-store.path =
# password for the truststore
#auth.ldap.server.ssl.trust-store.password =
# type of the truststore
#auth.ldap.server.ssl.trust-store.type =
# aliases of the truststore
#auth.ldap.server.ssl.trust-store.aliases =

# path of the keystore
#auth.ldap.server.ssl.key-store.path =
# password of the keystore
#auth.ldap.server.ssl.key-store.password =
# type of the keystore
#auth.ldap.server.ssl.key-store.type =
# aliases of the keystore
#auth.ldap.server.ssl.key-store.aliases =

# path of the trust certificates
#auth.ldap.server.ssl.cert.trust-path =
# path of the authentication certificate
#auth.ldap.server.ssl.cert.auth-path =
# path of the authentication key
#auth.ldap.server.ssl.cert.key-path =

# CAS configuration (EE only)
# ~~~~~

# login url
#auth.provider.cas.login-url = https://localhost:8443/cas/login
# prefix url
#auth.provider.cas.prefix-url = https://localhost:8443/cas

# CAS validation protocol: CAS10 / CAS20 / CAS20_PROXY / CAS30 (default) / CAS30_PROXY / SAML
#auth.provider.cas.protocol = CAS30

# for logout, you can use either central logout or logout default url
#auth.logout.central = true
#auth.logout.default-url = https://localhost:8443/cas/logout

# Mail
# ~~~~~

# smtp server host
#mail.smtp.host = smtp.gmail.com

# smtp server port
#mail.smtp.port = 587

# smtp encryption channel (starttls or ssl)
#mail.smtp.channel = starttls

# smtp username
#mail.smtp.user = user@gmail.com

# smtp password
#mail.smtp.password = secret

# smtp socket read timeout
#mail.smtp.timeout = 60000

# smtp socket connection timeout
#mail.smtp.connection-timeout = 60000

# default from attribute
#mail.smtp.from =

# imap server host
#mail.imap.host = imap.gmail.com

# imap server port
#mail.imap.port = 993

# imap encryption channel (starttls or ssl)
#mail.imap.channel = ssl

# imap username
#mail.imap.user = user@gmail.com

# imap password
#mail.imap.password = secret

# imap socket read timeout
#mail.imap.timeout = 60000

# imap socket connection timeout
#mail.imap.connection-timeout = 60000

# Logging
# ~~~~~

# Custom logback configuration
#logging.config = /path/to/logback.xml

# Storage path of logs files
#logging.path = {user.home}/.axelor/logs

# Format of file log message
#logging.pattern.file = %d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${PID:- } --- [%t] %-40.40logger{39} : %m%n

# Format of console log message
#logging.pattern.console = %clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n

# Global logging
logging.level.root = ERROR

# Axelor logging

# Log everything.
logging.level.com.axelor = INFO

# Hibernate logging

# Log everything. Good for troubleshooting
#logging.level.org.hibernate = INFO

# Log all SQL DML statements as they are executed
#logging.level.org.hibernate.SQL = DEBUG
#logging.level.org.hibernate.engine.jdbc = DEBUG

# Log all SQL DDL statements as they are executed
#logging.level.org.hibernate.tool.hbm2ddl = INFO

# Log all JDBC parameters
#logging.level.org.hibernate.type = ALL

# Log transactions
#logging.level.org.hibernate.transaction = DEBUG

# Log L2-Cache
#logging.level.org.hibernate.cache = DEBUG

# Log JDBC resource acquisition
#logging.level.org.hibernate.jdbc = TRACE
#logging.level.org.hibernate.service.jdbc = TRACE

# Log connection pooling
#logging.level.com.zaxxer.hikari = INFO
