<?xml version="1.0" encoding="UTF-8"?>
<!--

    Axelor Business Solutions

    Copyright (C) 2005-2025 Axelor (<http://axelor.com>).

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

-->
<schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="http://axelor.com/xml/ns/data-import"
  xmlns:db="http://axelor.com/xml/ns/data-import"
  elementFormDefault="qualified" version="7.4">

  <annotation>
    <documentation>
      XML Schema for the data import configuration file.
    </documentation>
  </annotation>

  <element name="csv-inputs">
    <annotation>
      <documentation>
        Defines CSV data binding to some domain objects.
      </documentation>
    </annotation>
    <complexType>
      <sequence>
        <element name="adapter" type="db:Adapter" minOccurs="0" maxOccurs="unbounded">
          <annotation>
            <documentation>Type adapter.</documentation>
          </annotation>
        </element>
        <element name="input" type="db:CSVInput" maxOccurs="unbounded">
          <annotation>
            <documentation>Input file binding.</documentation>
          </annotation>
        </element>
      </sequence>
    </complexType>
  </element>

  <element name="xml-inputs">
    <annotation>
      <documentation>Define input configurations for XML data import.</documentation>
    </annotation>
    <complexType>
      <sequence>
        <element name="adapter" type="db:Adapter" minOccurs="0" maxOccurs="unbounded">
          <annotation>
            <documentation>Type adapter.</documentation>
          </annotation>
        </element>
        <element name="input" type="db:XMLInput" maxOccurs="unbounded">
          <annotation>
            <documentation>Input file binding.</documentation>
          </annotation>
        </element>
      </sequence>
    </complexType>
  </element>

  <complexType name="Adapter">
    <sequence>
      <element name="option" minOccurs="0" maxOccurs="unbounded">
        <complexType>
          <attribute name="name" type="string"/>
          <attribute name="value" type="string"/>
        </complexType>
      </element>
    </sequence>
    <attribute name="name" type="string"></attribute>
    <attribute name="type" type="string"></attribute>
  </complexType>

  <complexType name="Input">
    <annotation>
      <documentation>Input file binding to some domain object(s)
      </documentation>
    </annotation>
    <attribute name="file" type="string" use="required">
      <annotation>
        <documentation>The input file name.</documentation>
      </annotation>
    </attribute>
  </complexType>

  <complexType name="Bind">
    <annotation>
      <documentation>Binding configuration.</documentation>
    </annotation>
    <attribute name="type" type="string">
      <annotation>
        <documentation>
          Type of the binding object. Only for dummy single value relational
          fields (if relation doesn't exist in current object).
        </documentation>
      </annotation>
    </attribute>
    <attribute name="json-model" type="string">
      <annotation>
        <documentation>Name of custom model (instead of type).</documentation>
      </annotation></attribute>
    <attribute name="search" type="string">
      <annotation>
        <documentation>Search expression (JPQL).</documentation>
      </annotation>
    </attribute>
    <attribute name="update" type="boolean">
      <annotation>
        <documentation>
          Whether to update the object or not.
        </documentation>
      </annotation>
    </attribute>
    <attribute name="eval" type="string">
      <annotation>
        <documentation>
          Groovy expression, can be used to transform the value.
        </documentation>
      </annotation>
    </attribute>
    <attribute name="if" type="string">
      <annotation>
        <documentation>
          Binding condition (Groovy boolean expression).
        </documentation>
      </annotation>
    </attribute>
    <attribute name="if-empty" type="boolean">
      <annotation>
        <documentation>
          Only update the value if target field is empty (or null).
        </documentation>
      </annotation>
    </attribute>
    <attribute name="check" type="string">
      <annotation>
        <documentation>
          The expression to validate binding (Groovy boolean expression).
        </documentation>
      </annotation>
    </attribute>
    <attribute name="check-message" type="string">
      <annotation>
        <documentation>
          The validation error message to show if `check` fails.
        </documentation>
      </annotation>
    </attribute>
  </complexType>

  <complexType name="CSVInput">
    <complexContent>
      <extension base="db:Input">
        <sequence>
          <sequence>
            <element name="header" type="string" minOccurs="0">
              <annotation>
                <documentation>The header of the input csv if first line of input is not header.</documentation>
              </annotation>
            </element>
            <element name="adapter" type="db:Adapter" minOccurs="0" maxOccurs="unbounded">
              <annotation>
                <documentation>Type adapter.</documentation>
              </annotation>
            </element>
            <element name="bind" type="db:CSVBind" maxOccurs="unbounded" minOccurs="0">
              <annotation>
                <documentation>Binding information.</documentation>
              </annotation>
            </element>
          </sequence>
        </sequence>
        <attribute name="type" type="string">
          <annotation>
            <documentation>
              Fully qualified name of the domain object.
            </documentation>
          </annotation>
        </attribute>
        <attribute name="json-model" type="string">
          <annotation>
            <documentation>Name of custom model (instead of type).</documentation>
          </annotation>
        </attribute>
        <attribute name="separator" default=",">
          <annotation>
            <documentation>
              The delimiter to use for separating field values (e.g. "\t" or "," etc.)
            </documentation>
          </annotation>
          <simpleType>
            <restriction base="string">
              <pattern value="(\\)?\S"></pattern>
            </restriction>
          </simpleType>
        </attribute>
        <attribute name="search" type="string">
          <annotation>
            <documentation>
              Search expression (JPQL).
            </documentation>
          </annotation>
        </attribute>
        <attribute name="update" type="boolean">
          <annotation>
            <documentation>
              Whether to update the objects.
            </documentation>
          </annotation>
        </attribute>
        <attribute name="call" type="string">
          <annotation>
            <documentation>
              Call a method once the object is populated.
              The object and value map is passed to the method.
            </documentation>
          </annotation>
        </attribute>
        <attribute name="prepare-context" type="string">
          <annotation>
            <documentation>
              Call a method to prepare default context just before importing the file.
              The global context map is passed to the method. The method should update the
              context map accordingly.
            </documentation>
          </annotation>
        </attribute>
        <attribute name="search-call" type="string">
          <annotation>
            <documentation>
              <![CDATA[
              Call a method to return a bean.

              Used to search a bean in case of complex searching. `search` JPQL
              expression will be ignored in favor of `search-call` method.
               ]]>
            </documentation>
          </annotation>
        </attribute>
      </extension>
    </complexContent>
  </complexType>

  <complexType name="CSVBind">
    <complexContent>
      <extension base="db:Bind">
        <sequence>
          <element name="bind" type="db:CSVBind" maxOccurs="unbounded" minOccurs="0">
            <annotation>
              <documentation>Binding information.</documentation>
            </annotation>
          </element>
        </sequence>
        <attribute name="to" type="string" use="required">
          <annotation>
            <documentation>The domain object field name.</documentation>
          </annotation>
        </attribute>
        <attribute name="column" type="string">
          <annotation>
            <documentation>The CSV column name.</documentation>
          </annotation>
        </attribute>
        <attribute name="adapter" type="string">
          <annotation>
            <documentation>
              Type adapter, followed by an optional string argument separated by '|' character.
            </documentation>
          </annotation>
        </attribute>
      </extension>
    </complexContent>
  </complexType>

  <complexType name="XMLInput">
    <complexContent>
      <extension base="db:Input">
        <sequence>
          <element name="adapter" type="db:Adapter" minOccurs="0" maxOccurs="unbounded">
            <annotation>
              <documentation>Type adapter.</documentation>
            </annotation>
          </element>
          <element name="bind" type="db:XMLBind" maxOccurs="unbounded">
            <annotation>
              <documentation>Binding information.</documentation>
            </annotation>
          </element>
        </sequence>
        <attribute name="root" type="string" use="required">
          <annotation>
            <documentation>The root element name.</documentation>
          </annotation>
        </attribute>
      </extension>
    </complexContent>
  </complexType>

  <complexType name="XMLBind">
    <complexContent>
      <extension base="db:Bind">
        <sequence>
          <element name="bind" type="db:XMLBind" minOccurs="0" maxOccurs="unbounded">
            <annotation>
              <documentation>Binding information.</documentation>
            </annotation>
          </element>
        </sequence>
        <attribute name="to" type="string">
          <annotation>
            <documentation>The domain object field name.</documentation>
          </annotation>
        </attribute>
        <attribute name="node" type="string">
          <annotation>
            <documentation>The XML node to bind (attribute or element or relative path with '/' separator).</documentation>
          </annotation>
        </attribute>
        <attribute name="alias" type="string">
          <annotation>
            <documentation>If the node value is relative path, use this alias as key for the context.</documentation>
          </annotation>
        </attribute>
        <attribute name="call" type="string">
          <annotation>
            <documentation>
              Call a method once the object is populated.
              The object and value map is passed to the method.
            </documentation>
          </annotation>
        </attribute>
        <attribute name="adapter" type="string">
          <annotation>
            <documentation>
              Type adapter, followed by an optional string argument separated by '|' character.
            </documentation>
          </annotation>
        </attribute>
        <attribute name="create" type="boolean">
          <annotation>
            <documentation>
              Whether to create the object or not.
            </documentation>
          </annotation>
      </attribute>
      </extension>
    </complexContent>
  </complexType>

</schema>
